###############################################################################
Mon Jul 13 15:56:57 CEST 2020

Recherche du cours
      https://openclassrooms.com/fr/courses/19980-apprenez-a-programmer-en-c
      XXh
      certificat de réussite à la clef

Les bases de la programmation en C
    1. Vous avez dit programmer ?
    2. Ayez les bons outils !
    3. Votre premier programme
    4. Un monde de variables
    5. Une bête de calcul
    6. Les conditions
    7. Les boucles
    8. TP : Plus ou Moins, votre premier jeu
    9. Les fonctions
    10. Entraînez-vous à améliorer le jeu du "plus ou moins"

Techniques « avancées » du langage C
     1. La programmation modulaire
          Le prototype
               Déclarer les prototypes en début de code pour pouvoir appeler les fonctions dans n'importequel ordre
               la forme : double aireRectangle(double, double);

          Les headers
               fichier .h qui contiennent les prototypes
               #include "jeu.h" dans les includes du .c

          les Includes
              On uilise des <> pour include fichier dans l'IDE
              On utilise "" pour include fichier dans le projet

          La compilation séparée
              Dans l'ordre preprocesseur-->compilateur-->linker

              Preprocesseur
                  démarre avant la compilation
                  exécute les lignes avec un # (instructions spéciales)
              Compilation
                  transformer vos fichiers source en code binaire
                  compile chaque fichier.c un à un
                  Génere fichiers .o (les binaires)
              Linker
                  Link les fichier .o ensemble
                  Gère les bibliothèque aussi

          Les variables
              Globales
                  accessible partout
                  Déclarées en dessous des includes
                  static global signfie global mais que dans le fichier
              Static
                  la fonction n'est pas supprimé apres l'exec de la fonction
                  La prochaine fois qu'on appellera la fonction, la variable aura conservé sa valeur

          Les fonction static
              Si on veut qu'une fonction ne soit accessible que dans le fichier dans lequel elle se trouve, il faut rajouter le mot-clé static devant


     2. À l'assaut des pointeurs
          Initialiser un pointeur
              int *monPointeur = NULL;

          sur une variable, comme la variable age:
              age signifie : « Je veux la valeur de la variable age»,
              &age signifie : « Je veux l'adresse à laquelle se trouve la variable age» ;
          sur un pointeur, comme pointeurSurAge:
              pointeurSurAge signifie : « Je veux la valeur de pointeurSurAge» (cette valeur étant une adresse),
              *pointeurSurAge signifie : « Je veux la valeur de la variable qui se trouve à l'adresse contenue dans pointeurSurAge».


     3. Les tableaux
          Les tableaux dans la mémoire
              tableau est un pointeur
              utilisation des cases mémoires continues
          Définir un tableau
              int tableau[4];
          Les tableaux à taille dynamique
              !!allocation dynamique!!
          Parcourir un tableau
              for (i = 0 ; i < 4 ; i++)
              {
                  printf("%d\n", tableau[i]);
              }
          Initialiser un tableau
              int tableau[4] = {0};
          Passage de tableaux à une fonction
              void affiche(int tableau[], int tailleTableau)
              void affiche(int *tableau, int tailleTableau)
          Exercices :
             cf exercice_tableau/

     4. Les chaînes de caractères
          char chaine[];
          printf("toto : %s", chaine);
     5. Le préprocesseur
          Les includes
              Commence tjs par #
              "<>" qd le .h est installé dans l'IDE
              "" qd dans le dossier du projet
          Les define
              associer une valeur à un mot
              different d'une constante
                  va remplacer le mot par ca valeur
                  n'occupe dpas de case mémoire
              généralement placés dans les .h
          Les constantes prédéfinies
              __LINE__: donne le numéro de la ligne actuelle.
              __FILE__: donne le nom du fichier actuel.
              __DATE__: donne la date de la compilation.
              __TIME__: donne l'heure de la compilation.
          Les macros
              Macro sans paramètres
              Macro avec paramètres
          Les conditions
              Faire des compilations conditionnelles
              /*code*/ #if condition
              /*code*/     /* Code source à compiler si la condition est vraie */
              /*code*/ #elif condition2
              /*code*/     /* Sinon si la condition 2 est vraie compiler ce code source */
              /*code*/ #endif
          #ifndef pour éviter les inclusions infinies
              /*code*/ #ifndef DEF_NOMDUFICHIER // Si la constante n'a pas été définie le fichier n'a jamais été inclus
              /*code*/ #define DEF_NOMDUFICHIER // On définit la constante pour que la prochaine fois le fichier ne soit plus inclus
              /*code*/ /* Contenu de votre fichier .h (autres include, prototypes, define...) */
              /*code*/ #endif


     6. Créez vos propres types de variables
          Les structures
              Définir une structure
                  définies dans les .h
                  /*code*/ struct NomDeVotreStructure
                  /*code*/ {
                  /*code*/     int variable1;
                  /*code*/     int variable2;
                  /*code*/     int autreVariable;
                  /*code*/     double nombreDecimal;
                  /*code*/ };
              Utilisation d'une structure
                  /*code*/ struct Coordonnees point; // Création d'une variable "point" de type Coordonnees
              Le typedef
                  dans le .h ecrire /*code*/ typedef struct Coordonnees Coordonnees;
                  crée un alias
              Modifier les composantes de la structure
                  x.point = 10 /*si la structure a un variable point
              Initialiser une structure
                  important pour ne pas avoir valeurs résiduelles
              Pointeur de structure
                  Coordonnees *point = NULL;
                  Envoi de la structure à une fonction
                      /*code*/ initialiserCoordonnees(&monPoint);
                      /*code*/ void initialiserCoordonnees(Coordonnees* point)
                      /*code*/ {
                      /*code*/     (*point).x = 0;
                      /*code*/     (*point).y = 0;
                      /*code*/ }
              Autre maniere d'écrire des pointeurs de structure
                  (*point).x = 0;
                  point->x = 0;
                     la flèche que sur un pointeur

          Les énumérations
              /*code*/ typedef enum Volume Volume;
              /*code*/ enum Volume
              /*code*/ {
              /*code*/     FAIBLE, MOYEN, FORT
              /*code*/ };

          SumUp
              Une structure
                  type de variable personnalisé à définir
                  composée de « sous-variables »
                      int
                      double
                      tableaux
                  Acceder à un des composants de la structure : joueur.prenom
                  Si on manipule un pointeur de structure
                      flèche à la place du point
                          pointeurJoueur->prenom
               Une énumération
                   type de variable personnalisé
                   peut seulement prendre une des valeurs prédéfinies


     7. Lire et écrire dans des fichiers
         Ouvrir et fermer un fichier
            FILE* fichier = NULL;
            fichier = fopen("test.txt", "w");

            fputc: écrit un caractère dans fichier -UN SEUL caractère à la fois

            fputs: écrit une chaîne dans le fichier ;
               proto : char* fputs(const char* chaine, FILE* pointeurSurFichier);

            fprintf: écrit chaîne « formatée » dans fichier, similaire à printf

            fclose(fichier);

         Lire dans un fichier
             fgetc: lit un caractère ;
             fgets: lit une chaîne ;
             fscanf: lit une chaîne formatée.
                 fscanf(fichier, "%d %d %d", &score[0], &score[1], &score[2]);
                 printf("Les meilleurs scores sont : %d, %d et %d", score[0], score[1], score[2]);
             EOF signifie End Of File
                  while (caractereActuel != EOF)

         Se déplacer dans un fichier
             ftell: indique position actuelle ds le fichier
             fseek: positionne le curseur à un endroit précis
             rewind: remet le curseur au début du fichier

         Renommer et supprimer un fichier
             rename: renomme un fichier ;
             remove: supprime un fichier.


     8. L'allocation dynamique
         sizeof() --> Connaitre taille en octet
         malloc   --> « Memory ALLOCation »
             demande à l'OS la permission d'utiliser de la mémoire
         free     --> « Libérer »
             indiquer à l'OS que l'on n'a plus besoin de la mémoire demandée.
             La place en mémoire est libérée
             un autre programme peut maintenant s'en servir au besoin.
         Allocation dynamique d'un tableau

         SumUp
             Une variable occupe plus ou moins d'espace en mémoire en fonction de son type.
             On peut connaître le nombre d'octets occupés par un type : syzeof()
             L'allocation dynamique : réserver manuellement de l'espace en mémoire pour une variable ou un tableau.
             L'allocation est effectuée avec malloc()
             libérer la mémoire avec free() dès qu'on n'en a plus besoin.
             L'allocation dynamique permet créer un tableau dont la taille est déterminée par une variable au moment de l'exécution.


     9. TP : réalisation d'un Pendu


     10. La saisie de texte sécurisée
         La fonctionscanf très complexe et certaines limites
         Un buffer overflow survient lorsqu'on dépasse l'espace réservé en mémoire
             par exemple si l'utilisateur entre 10 caractères alors qu'on n'avait réservé que 5 cases en mémoire.
         faire appel à la fonction fgets
             pour récupérer du texte saisi par l'utilisateur.
         éviter à tout prix d'utiliser la fonction gets
             qui n'offre pas de protection contre le buffer overflow.
         écrire votre propre fonction de saisie du texte qui fait appel à fgets


    11. Apprenez à expliquer les pointeurs


Création de jeux 2D en SDL
    1. Installation de la SDL
    2. Création d'une fenêtre et de surfaces
    3. Afficher des images
    4. La gestion des événements
    5. TP : Mario Sokoban
    6. Maîtrisez le temps !
    7. Écrire du texte avec SDL_ttf
    8. Jouer du son avec FMOD
    9. TP : visualisation spectrale du son
        8/10

Les structures de données
    1. Les listes chaînées
        Représentation d'une liste chaînée
            Moyen d'organiser une série de données en mémoire
                 Assembler des structures en les liant à l'aide de pointeurs
            !!C'est une chaîne de pointeurs!!

        Construction d'une liste chaînée
            Un élément de la liste
                */code/*  typedef struct Element Element;
                */code/*  struct Element
                */code/*  {
                */code/*      int nombre;
                */code/*      Element *suivant;
                */code/*  };
            La structure de contrôl
                contient un pointeur vers le premier élément de la liste
                */code/*  typedef struct Liste Liste;
                */code/*  struct Liste
                */code/*  {
                */code/*      Element *premier;
                */code/*  };
            Le dernier élément de la liste
                Faire pointer le dernier élément de la liste vers NULL

        Les fonctions de gestion de la liste    
        
    2. Les piles et les files
    3. Les tables de hachage

