###############################################################################
Tue Jul 14 09:19:09 CEST 2020

Recherche du cours
      https://openclassrooms.com/fr/courses/235344-apprenez-a-programmer-en-python/230659-decouvrez-python
      40h
      certificat de réussite à la clef


A. Faites vos premiers pas en Python
    1. Découvrez le python
        python language interprété et non compilé

    2. Faites vos premier pas avec l'interpreteur
    3. Les variables
    4. Structures conditionnelles

    5.Les boucles
        if
        while
        break (use with precautious)
        continue
            permet de continuer la boucle sans executer ce qu'il y a en dessous

    6. Modularité (1/2)
        fonction avec valeur par défault
            def example(a=1):
            On peut créer des !!docstring!!, c'est une explication qui sort lorsque l'on fera help(fonction)
                s'écrit juste en dessous de la fonction :""" ceci est une docstring """
        !!lambda!!
            fonction courte limité à une exec
            f = lambda x: x * x
            f(5)
            #return 25
        Modules
            la fonction help pour connaitre les fonctions du module
            import XXXXX
                faire XXXXXX.FFFFFF (FFFFFF est une fonction)
            import XXXXX as YYYYYY (changer le nom du module)
                faire YYYYYY.FFFFFF
            from XXXXXX import FFFFFF (importer seulement une fonction du module)
                avec le from pas besoin de faire XXXXXX.FFFFFF mais seulement FFFFFF

    7. Modularité (2/2)
        Dans un fichier mettre en préambule #!/usr/bin/python3.6
                                            # -*-coding:utf-8 -*
        Créer ces propres modules
            on peut faire les import de ces modules
            if __name__ == "__main__" permet de lancer le code si le module est lancer directement

        Les packages
            regroupement de plusieurs modules
            se sont juste des repertoires

    8. Gérez les exceptions
        Forme minimale du bloc try
            /*code*/ try:
            /*code*/     # Bloc à essayer
            /*code*/ except:
            /*code*/     # Bloc qui sera exécuté en cas d'erreur

        Forme plus complète
            /*code*/ try:
            /*code*/     resultat = numerateur / denominateur
            /*code*/ except NameError:
            /*code*/     print("La variable numerateur ou denominateur n'a pas été définie.")
            /*code*/ except TypeError:
            /*code*/     print("La variable numerateur ou denominateur possède un type incompatible avec la division.")
            /*code*/ except ZeroDivisionError:
            /*code*/     print("La variable denominateur est égale à 0.")
            /*code*/ else:
            /*code*/     print("Le résultat obtenu est", resultat)

        Le mot-clé finally
            Permet d'éxecuter du code après le try quelque soit le résultat

        le mot-clé pass
            Permet de ne rien faire en cas d'erreur

        Les assertions
            /*code*/ assert var == 8
            Permet de lever une erreur suivant une condition
               nom de l'erreur : AssertionError

        Lever une exception
            /*code*/ raise TypeDeLException("message à afficher")

        SumUp
            Intercepter les erreurs ac : try/except
            assertion : assert condition
                lève AssertionError si condition == FALSE
            Lever une exception :raise


    9. TP : tous au ZCasino
        cf : TP_tous_au_Zcasino/

    10. Quiz
        15/20

B. Découvrez la Programmation Orientée Objet côté utilisateur
    1. Créez votre premier objet : les chaînes de caractères
        c'est quoi un objet ?
            un objet est une structure de données,
                comme les variables, qui peut contenir elle-même d'autres variables et fonctions
            En python tout est objet

        Les méthodes de la classe str
            Objet
                objet.methode()
                Peut contenir variable et methode (=fonction)
            Classes
                modèle qui servira à construire un objet

    2. Créez des listes et des tuples (1/2)
        Créons et éditons nos premières listes
            liste = []
        Insérer des objets dans une liste
            ma_liste.append("toto")
        Insérer un élément dans la liste
            ma_liste.insert(2, 'c') # On insère 'c' à l'indice 2
        Concaténation de listes
            ma_liste1 += ma_liste2
            ou ma_liste1.extend(ma_liste2)
        Suppression d'éléments d'une liste
            del ma_liste[2] #index de l'element
            ma_liste.remove(32) #l'élément lui-même
        Le parcours de listes
            while i < len(ma_liste):
            for elt in ma_liste: #meilleur méthode
            La fonction enumerate
                for elt in enumerate(ma_liste):
                crée un tuple avec (i,lélément)
        Les tuples
            séquence pouvant contenir des objets.
            Ne peut être modifié une fois créé

    3. Créez des listes et des tuples (2/2)
        Entre chaînes et listes
            Des chaînes aux listes
                >>> ma_chaine.split(" ")
                ['Bonjour', 'à', 'tous']
            Des listes aux chaînes
                >>> " ".join(ma_liste)
                'Bonjour à tous'
            Une application pratique
                cf ex_liste_and_tuples.py
            Les listes et paramètres de fonctions
                Les fonctions dont on ne connaît pas à l'avance le nb de param
                    def fonction(*parametres):
                    étoile * devant le nom du paramètre
                        Va placer ts les paramètres de la fonction ds 1 tuple
                Transformer une liste en paramètres de fonction
                    >>> print(*liste_des_parametres)
                    1 4 9 16 25 36
            Les compréhensions de liste
                Parcours simple
                    >>> liste_origine = [0, 1, 2, 3, 4, 5]
                    >>> [nb * nb for nb in liste_origine]
                    [0, 1, 4, 9, 16, 25]
                Filtrage avec un branchement conditionnel
                    >>> liste_origine = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                    >>> [nb for nb in liste_origine if nb % 2 == 0]
                    [2, 4, 6, 8, 10]
                Mixing
                    >>> qtt_a_retirer = 7 # On retire chaque semaine 7 fruits de chaque sorte
                    >>> fruits_stockes = [15, 3, 18, 21] # Par exemple 15 pommes, 3 melons...
                    >>> [nb_fruits-qtt_a_retirer for nb_fruits in fruits_stockes if nb_fruits>qtt_a_retirer]
                    [8, 11, 14]
                Nouvelle application concrète
                    cf comprehension_de_list.py

    4. Utilisez des dictionnaires
        Création et édition de dictionnaires
            outil puissant
            Les dictionnaires n'ont pas de structure ordonnée
            C'est un objet conteneur
                on uilise des clefs oour acceder aux donées qu'il contient
            Créer un dictionnaire
                >>> mon_dictionnaire = dict()
                >>> mon_dictionnaire["pseudo"] = "Prolixe"
                >>> mon_dictionnaire["mot de passe"] = "*"
                >>> mon_dictionnaire
                    réponse --> {'mot de passe': '*', 'pseudo': 'Prolixe'}
                Créer un dictionnaire déjà remplis
                    placard = {"chemise":3, "pantalon":6, "tee-shirt":7}
            Supprimer des clés d'un dictionnaire
                del : mot clef
                pop : methode du dictionnaire
                    pop renvoi la valeur supprimé en plus
            Un peu plus loin
                On se sert parfois des dictionnaires pr stocker des fonctions
                    >>> fonctions = {}
                    >>> fonctions["fete"] = fete # on ne met pas les parenthèses
                    >>> fonctions["oiseau"] = oiseau
                    >>> fonctions["oiseau"]
                        <function oiseau at 0x00BA5198>
                    >>> fonctions["oiseau"]() # on essaye de l'appeler
                        Fais comme l'oiseau...
            Les méthodes de parcours
                La méthode keys
                    renvoie la liste des clés contenues dans le dictionnaire
                    >>> for cle in fruits.keys():
                    ...     print(cle)
                La méthode values
                    parcourir les valeurs contenues dans un dictionnaire
                    >>> if 21 in fruits.values():
                    ...     print("Un des fruits se trouve dans la quantité 21.")
            Parcours des clés et valeurs simultanément
                la méthode items
                    Elle renvoie une liste, contenant les couples clé : valeur
                    Renvoie sous la forme d'untuple
                    >>> fruits = {"pommes":21, "melons":3, "poires":31}
                    >>> for cle, valeur in fruits.items():
                         print("La clé {} contient la valeur {}.".format(cle, valeur))
                    La clé melons contient la valeur 3.
                    La clé poires contient la valeur 31.
                    La clé pommes contient la valeur 21.
            Les dictionnaires et paramètres de fonction
                Récupérer les paramètres nommés dans un dictionnaire
                    >>> def fonction_inconnue(**parametres_nommes):
                    ...     """Fonction permettant de voir comment récupérer les paramètres nommés
                    ...     dans un dictionnaire"""
                    ...     print("J'ai reçu en paramètres nommés : {}.".format(parametres_nommes))
                    >>> fonction_inconnue() # Aucun paramètre
                    J'ai reçu en paramètres nommés : {}
                    >>> fonction_inconnue(p=4, j=8)
                    J'ai reçu en paramètres nommés : {'p': 4, 'j': 8}
                    il faut mettre deux étoiles ** avant le nom du paramètre
                Transformer un dictionnaire en paramètres nommés d'une fonction
                    >>> parametres = {"sep":" >> ", "end":" -\n"}
                    >>> print("Voici", "un", "exemple", "d'appel", **parametres)
                    Voici >> un >> exemple >> d'appel -
                        paramètres nommés :
                            on met ** avt le nom dans l'appel de la fonction
                    equivalent à :
                        >>> print("Voici", "un", "exemple", "d'appel", sep=" >> ", end=" -\n")
                SumUp
                    créer un dictionnaire
                        dictionnaire = {cle1:valeur1, cle2:valeur2, cleN:valeurN}
                    Ajouter ou remplacer un élément dans un dictionnaire
                        dictionnaire[cle] = valeur
                    supprimer une clé (et sa valeur correspondante)
                        mot-clé del
                        méthode pop
                    parcourir un dictionnaire
                        parcourt les clés
                            méthodes keys
                        parcourt les valeurs
                            méthode values
                        parcourt les couples clé-valeur
                            méthode items
                        capturer les paramètres nommés passés à une fonction
                            def fonction_inconnue(**parametres_nommes):
                                (les paramètres nommés se retrouvent dans le dictionnaire parametres_nommes)

    5. Utilisez des fichiers
        Ouvrir un fichier
            mon_fichier = open("fichier.txt", "r")
            r pour Read
            a pour Append
            w pour Write
        Fermer le fichier
            mon_fichier.close()
        Lire l'intégralité du fichier
            >>> mon_fichier = open("fichier.txt", "r")
            >>> contenu = mon_fichier.read()
        Écriture dans un fichier
            Écrire une chaîne
                 write n'accepte que des caractères
                 mon_fichier.write("Premier test d'écriture dans un fichier via Python")
        Le mot-clé with
            with open(mon_fichier, mode_ouverture) as variable:
            Le mot-cléi with permet de créer un "context manager"
                vérifie que le fichier est ouvert et fermé
        Enregistrer des objets dans des fichiers
            Grâce au module pickle
            sauvegarder l'objet
                >>> score = {
                ...   "joueur 1":    5,
                ...   "joueur 2":   35,
                ...   "joueur 3":   20,
                ...   "joueur 4":    2,
                >>> }
                >>> with open('donnees', 'wb') as fichier:
                ...     mon_pickler = pickle.Pickler(fichier)
                ...     mon_pickler.dump(score)
            Récupérer nos objets enregistrés
            >>> with open('donnees', 'rb') as fichier:
            ...     mon_depickler = pickle.Unpickler(fichier)
            ...     score_recupere = mon_depickler.load()
        SumUp
            ouvrir un fichier
                fonction openprenant
                    en paramètre le chemin fichier et mode d'ouverture
                lire dans un fichier en utilisant la méthode read.
                écrire dans un fichier en utilisant la méthode write.
                Un fichier doit être refermé après usage : méthode close
                Module pickle pour enregistrer et recherger des objets Python
    6. Variables et références
        2 variables peuvent pointer sur même objet --> comme les pointeurs
        >>> ma_liste1 == ma_liste2 # On compare le contenu des listes
            True
        >>> ma_liste1 is ma_liste2 # On compare leur référence
            False

    7. TP pendu
    8. Quiz

C. Programmation Orientée Objet côté développeur
    1. Appréhendez les classes
        Classe: mot clef class
        constructeur : mot clef def __init__(self):
        instanciacion: self.nom

        Attributs de classe
            ce sont en gros les variables
        Les methodes
            ce sont en gros les fonctions
        Le paramètre self

        SumUp
            On définit une classe en suivant la syntaxeclass NomClasse:.
            Les méthodes se définissent comme fonctions, elles sont ds la classe.
            Les méthodes d'instance prennent en premier paramètre self
            On construit une instance de classe en appelant son constructeur __init__
            On définit les attributs d'une instance dans le constructeur de sa classe:
                self.nom_attribut = valeur.

